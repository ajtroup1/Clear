/*
	The Parser assembles an AST according to the stream of tokens generated by the Lexer
*/
package parser

import (
	"fmt"

	"github.com/ajtroup1/clear/src/ast"
	"github.com/ajtroup1/clear/src/lexer"
	"github.com/ajtroup1/clear/src/token"
)

// Overall state for the Parser
// Contains an error array that tracks parsing errors
	// More sophisticated than runtime printing errors by far
type Parser struct {
	l         *lexer.Lexer
	curToken  token.Token
	peekToken token.Token
	errors    []string
}

// Returns a new instance of Parser given a Lexer instance
func New(l *lexer.Lexer) *Parser {
	p := &Parser{
		l:      l,
		errors: []string{},
	}

	// Read two tokens, so curToken and peekToken are both set
	p.nextToken()
	p.nextToken()
	return p
}
// Simply returns all the accumulated Parser errors
func (p *Parser) Errors() []string {
	return p.errors
}
// Adds an error if the peeked token is not equal to the passed type
func (p *Parser) peekError(t token.TokenType) {
	msg := fmt.Sprintf("expected next token to be %s, got %s instead",
		t, p.peekToken.Type)
	p.errors = append(p.errors, msg)
}

// Simple function to advance the Parser state
func (p *Parser) nextToken() {
	p.curToken = p.peekToken
	p.peekToken = p.l.NextToken()
}

/*
	Core function of the Parser
*/
func (p *Parser) ParseProgram() *ast.Program {
	program := &ast.Program{}
	program.Statements = []ast.Statement{}
	for p.curToken.Type != token.EOF {
		stmt := p.parseStatement()
		if stmt != nil {
			program.Statements = append(program.Statements, stmt)
		}
		p.nextToken()
	}
	return program
}

// Helper function that switches the type of statement based on current token
// Calls a respective function for each case
func (p *Parser) parseStatement() ast.Statement {
	switch p.curToken.Type {
	case token.LET:
		return p.parseLetStatement()
	case token.RETURN:
		return p.parseReturnStatement()
	default:
		return nil
	}
}

// Helper function to parse a LET statement from parseStatement()
func (p *Parser) parseLetStatement() *ast.LetStatement {
	// Asssign the raw LET token to the struct
		// Why not
	stmt := &ast.LetStatement{Token: p.curToken}

	// Let IDENT = VALUE;
		//     ^
	// The next step in assigning a let is getting the identifier for what you're assigning
	if !p.expectPeek(token.IDENT) {
		return nil
	}
	// Assign the identifier to the LET statement after buffering it
	stmt.Name = &ast.Identifier{Token: p.curToken, Value: p.curToken.Literal}
	// Let IDENT = VALUE;
		//         ^
	// The next required char is an equal sign to signify assigning an identifier to a value
	if !p.expectPeek(token.ASSIGN) {
		return nil
	}
	// TODO: We're skipping the expressions until we
	// encounter a semicolon
	for !p.curTokenIs(token.SEMICOLON) {
		p.nextToken()
	}
	return stmt
}

// Helper function to parse a RETURN statement in Clear
func (p *Parser) parseReturnStatement() *ast.ReturnStatement {
	stmt := &ast.ReturnStatement{Token: p.curToken}
	p.nextToken()
	// TODO: We're skipping the expressions until we
	// encounter a semicolon
	for !p.curTokenIs(token.SEMICOLON) {
		p.nextToken()
	}
	return stmt
}

// Function that returns whether the current token is the sent token type
func (p *Parser) curTokenIs(t token.TokenType) bool {
	return p.curToken.Type == t
}
// Function that returns whether the peek token is the sent token type
func (p *Parser) peekTokenIs(t token.TokenType) bool {
	return p.peekToken.Type == t
}
// If peekToken() evaluates to true (with a passed token type), call nextToken()
func (p *Parser) expectPeek(t token.TokenType) bool {
	if p.peekTokenIs(t) {
		p.nextToken()
		return true
	} else {
		return false
	}
}
